<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Credit Card Benefit Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Chosen Palette: Neutral Slate with Blue Accent -->
    <!-- Application Structure Plan: A responsive dashboard with a card-based layout. Each card represents a credit card and contains an interactive checklist of its benefits. Checking a benefit updates a progress bar and a summary, showing the user the value they've extracted relative to the annual fee. This structure is intuitive, provides immediate feedback, and allows for easy comparison between cards. -->
    <!-- Visualization & Content Choices: Card Info -> Goal: Organize -> Presentation: Card layout -> Interaction: N/A. Benefits List -> Goal: Track -> Presentation: Interactive Checklist (HTML checkboxes for annual), individual checkboxes for each month for monthly benefits, and numeric input for variable annual benefits -> Interaction: Click to toggle checkbox, click individual monthly checkboxes, input numeric value. Annual Fee Offset -> Goal: Visualize Progress -> Presentation: Horizontal Bar Chart (Chart.js) -> Interaction: Dynamically updates on checkbox/input change. This combination of a list and a visual chart provides both detailed tracking and a quick-glance summary of value. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .chart-container {
            position: relative;
            height: 40px;
            width: 100%;
        }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="bg-slate-50 text-slate-800">

    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-slate-900">Credit Card Benefit Tracker</h1>
            <p class="text-slate-500 mt-2">Check off the benefits you've used or input amounts to see how much value you're getting from each card.</p>
        </header>

        <main id="card-grid" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-8">
            <!-- Credit card components will be injected here by JavaScript -->
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const years = Array.from({length: 20}, (_, i) => 2020 + i);
            const days = Array.from({length: 31}, (_, i) => i + 1);

            const cardData = [
                {
                    id: 'chase-sapphire-reserve',
                    name: 'Chase Sapphire Reserve',
                    bank: 'Chase',
                    annualFee: 550,
                    openDate: { month: 'Aug', day: 1, year: 2022 },
                    benefits: [
                        { description: '$300 Annual Travel Credit', value: 300, frequency: 'variable_annual', amountUsed: 0 },
                        { description: 'Priority Pass Select Membership', value: 469, frequency: 'annual', used: false },
                        { description: 'Global Entry/TSA PreCheck Credit', value: 100, frequency: 'annual', used: false },
                        { description: 'DoorDash DashPass Credit ($10/mo)', value: 10, frequency: 'monthly', monthsUsed: Array(12).fill(false) },
                        { description: '$10/mo Lyft Credit', value: 10, frequency: 'monthly', monthsUsed: Array(12).fill(false) }
                    ],
                    additionalBenefits: [
                        '**Purchase Protection:** Covers new purchases against damage or theft for 120 days, up to $10,000 per claim.',
                        '**Extended Warranty Protection:** Extends U.S. manufacturer\'s warranty by one additional year, on eligible warranties of three years or less.',
                        '**Lost Luggage Reimbursement:** Reimburses up to $3,000 per passenger for lost or damaged luggage on a covered trip.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'points' },
                    redemptionOptions: [
                        { method: 'Transfer to Partners', pointsRedeemed: 0, valueDescription: 'High value possible'},
                        { method: 'Booking Travel', pointsRedeemed: 0, valueDescription: '1.5x value' },
                        { method: 'Cash Back / Statement Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Other', pointsRedeemed: 0, valueDescription: 'Varies' }
                    ]
                },
                {
                    id: 'chase-united-quest',
                    name: 'Chase United Quest',
                    bank: 'Chase',
                    annualFee: 350,
                    openDate: { month: 'Mar', day: 1, year: 2024 },
                    benefits: [
                        { description: '$200 United TravelBank Credit', value: 200, frequency: 'variable_annual', amountUsed: 0 },
                        { description: 'First & Second Free Checked Bag (for 2)', value: 360, frequency: 'annual', used: false },
                        { description: '10,000-mile award flight discount', value: 135, frequency: 'annual', used: false },
                        { description: '$100 rideshare credits ($8/mo)', value: 8, frequency: 'monthly', monthsUsed: Array(12).fill(false) },
                        { description: '$180 Instacart credits ($15/mo)', value: 15, frequency: 'monthly', monthsUsed: Array(12).fill(false) }
                    ],
                    additionalBenefits: [
                        '**Earning Multipliers:** 3x miles on United purchases, 2x on other travel, dining, and streaming services.',
                        '**Travel Protection:** Includes Trip Cancellation/Interruption Insurance ($1,500 pp), Trip Delay Reimbursement ($500 pp), and Lost Luggage Reimbursement ($3,000 pp).',
                        '**Purchase Protection:** Covers new purchases for 120 days against damage or theft, up to $500 per claim.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'miles' },
                    redemptionOptions: [
                        { method: 'Award Flights', pointsRedeemed: 0, valueDescription: 'High value possible' },
                        { method: 'Other Travel', pointsRedeemed: 0, valueDescription: 'Varies' },
                        { method: 'Merchandise', pointsRedeemed: 0, valueDescription: 'Low value' }
                    ]
                },
                {
                    id: 'chase-amazon-prime-visa',
                    name: 'Chase Amazon Prime Visa',
                    bank: 'Chase',
                    annualFee: 0,
                    openDate: { month: 'Sep', day: 1, year: 2023 },
                    benefits: [],
                    additionalBenefits: [
                        '**Earning Multipliers:** 5% back at Amazon.com and Whole Foods, 2% on restaurants, drugstores, and gas stations.',
                        '**Travel Protections:** Includes baggage delay insurance, lost luggage reimbursement, and trip delay reimbursement.',
                        '**Purchase Protection:** Covers new purchases for 120 days against damage or theft, up to $500 per claim.',
                        '**Extended Warranty Protection:** Extends U.S. manufacturer\'s warranty by one additional year.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'cash back' },
                    redemptionOptions: [
                        { method: 'Amazon.com Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Statement Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Gift Cards', pointsRedeemed: 0, valueDescription: 'Varies' }
                    ]
                },
                {
                    id: 'chase-business-ink-preferred',
                    name: 'Chase Ink Business Preferred',
                    bank: 'Chase',
                    annualFee: 95,
                    openDate: { month: 'Jan', day: 1, year: 2023 },
                    benefits: [
                        { description: 'Cell Phone Protection', value: 1000, frequency: 'variable_annual', amountUsed: 0 }
                    ],
                    additionalBenefits: [
                        '**Earning Multipliers:** 3x points on travel, shipping, internet/cable/phone, and advertising (on up to $150,000 annually).',
                        '**Primary Auto Rental Collision Damage Waiver:** Covers theft and collision damage on rental cars.',
                        '**Trip Cancellation/Interruption Insurance:** Reimburses up to $5,000 per person for prepaid nonrefundable travel expenses.',
                        '**Purchase Protection:** Covers new purchases for 120 days against damage or theft, up to $10,000 per claim.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'points' },
                    redemptionOptions: [
                        { method: 'Booking Travel', pointsRedeemed: 0, valueDescription: '1.25x value' },
                        { method: 'Transfer to Partners', pointsRedeemed: 0, valueDescription: 'High value possible' },
                        { method: 'Cash Back / Statement Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Gift Cards', pointsRedeemed: 0, valueDescription: 'Varies' }
                    ]
                },
                {
                    id: 'chase-freedom-flex',
                    name: 'Chase Freedom Flex',
                    bank: 'Chase',
                    annualFee: 0,
                    openDate: { month: 'Feb', day: 1, year: 2022 },
                    benefits: [
                        { description: '5% Rotating Categories', value: 75, frequency: 'quarterly', used: [false, false, false, false], options: ['Grocery Stores', 'Amazon.com', 'Wholesale Clubs', 'Gas Stations', 'Streaming Services', 'Drugstores'] },
                        { description: 'Cell Phone Protection', value: 800, frequency: 'variable_annual', amountUsed: 0 }
                    ],
                    additionalBenefits: [
                        '**Earning Multipliers:** 5% on rotating bonus categories (up to $1,500 quarterly), 5% on travel booked through Chase, 3% on dining and drugstores.',
                        '**Purchase Protection:** Covers new purchases for 120 days against damage or theft, up to $500 per claim.',
                        '**Extended Warranty:** Extends U.S. manufacturer\'s warranty by one additional year.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'cash back' },
                    redemptionOptions: [
                        { method: 'Booking Travel', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Cash Back / Statement Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Pay Yourself Back', pointsRedeemed: 0, valueDescription: '1.0x-1.25x value' }
                    ]
                },
                {
                    id: 'amex-platinum',
                    name: 'Amex Platinum',
                    bank: 'American Express',
                    annualFee: 695,
                    openDate: { month: 'May', day: 15, year: 2021 },
                    benefits: [
                        { description: '$200 Hotel Credit', value: 200, frequency: 'variable_annual', amountUsed: 0 },
                        { description: '$200 Airline Fee Credit', value: 200, frequency: 'variable_annual', amountUsed: 0 },
                        { description: '$240 Digital Entertainment Credit ($20/mo)', value: 20, frequency: 'monthly', monthsUsed: Array(12).fill(false) },
                        { description: '$155 Walmart+ Credit ($12.95/mo)', value: 12.95, frequency: 'monthly', monthsUsed: Array(12).fill(false) },
                        { description: '$200 Uber Cash ($15/mo)', value: 15, frequency: 'monthly', monthsUsed: Array(12).fill(false) },
                        { description: '$100 Saks Credit', value: 100, frequency: 'variable_annual', amountUsed: 0 },
                        { description: '$189 CLEAR Plus Credit', value: 189, frequency: 'variable_annual', amountUsed: 0 }
                    ],
                    additionalBenefits: [
                        '**Earning Multipliers:** 5x points on flights booked directly with airlines or through Amex Travel, 5x on prepaid hotels booked on Amex Travel.',
                        '**Cell Phone Protection:** Up to $800 per claim for repair/replacement against damage or theft when you pay your cell bill with the card (limit 2 claims per 12 months, $50 deductible).',
                        '**Purchase Protection:** Covers eligible purchases for 90 days against damage or theft, up to $10,000 per claim.',
                        '**Extended Warranty:** Adds up to one extra year to the original manufacturer\'s warranty of 5 years or less.',
                        '**Baggage Insurance:** Provides coverage for lost, damaged, or stolen baggage during a covered trip.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'points' },
                    redemptionOptions: [
                        { method: 'Transfer to Partners', pointsRedeemed: 0, valueDescription: 'High value possible' },
                        { method: 'Booking Travel', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Statement Credit', pointsRedeemed: 0, valueDescription: '0.6x value' },
                        { method: 'Gift Cards', pointsRedeemed: 0, valueDescription: 'Varies' },
                        { method: 'Other', pointsRedeemed: 0, valueDescription: 'Varies' }
                    ]
                },
                {
                    id: 'amex-blue-cash-everyday',
                    name: 'Amex Blue Cash Everyday',
                    bank: 'American Express',
                    annualFee: 0,
                    openDate: { month: 'Nov', day: 1, year: 2023 },
                    benefits: [
                        { description: '$84 Disney Bundle Credit ($7/mo)', value: 7, frequency: 'monthly', monthsUsed: Array(12).fill(false) }
                    ],
                    additionalBenefits: [
                        '**Earning Multipliers:** 3% cash back at U.S. supermarkets, U.S. gas stations, and online retail purchases (on up to $6,000 per year in each category).',
                        '**Amex Offers:** Access to exclusive discounts and credits at various merchants.',
                        '**Car Rental Loss and Damage Insurance:** Secondary coverage for theft or damage to a rental vehicle.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'cash back' },
                    redemptionOptions: [
                        { method: 'Statement Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Merchandise', pointsRedeemed: 0, valueDescription: 'Varies' },
                        { method: 'Gift Cards', pointsRedeemed: 0, valueDescription: 'Varies' }
                    ]
                },
                {
                    id: 'amex-amazon-business-prime',
                    name: 'Amex Amazon Business Prime',
                    bank: 'American Express',
                    annualFee: 125,
                    openDate: { month: 'May', day: 1, year: 2024 },
                    benefits: [
                        { description: '$125 Amazon.com Credit', value: 125, frequency: 'variable_annual', amountUsed: 0 }
                    ],
                    additionalBenefits: [
                        '**Earning Multipliers:** 5% back on Amazon.com and Whole Foods, 2% at U.S. gas stations, restaurants, and wireless services.',
                        '**Extended Warranty:** Adds up to one extra year to eligible manufacturer\'s warranties.',
                        '**Purchase Protection:** Covers new purchases for 90 days against damage or theft.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'cash back' },
                    redemptionOptions: [
                        { method: 'Amazon.com Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Statement Credit', pointsRedeemed: 0, valueDescription: '0.6x value' }
                    ]
                },
                {
                    id: 'delta-amex-platinum',
                    name: 'Delta Amex Platinum',
                    bank: 'American Express',
                    annualFee: 350,
                    openDate: { month: 'Apr', day: 1, year: 2024 },
                    benefits: [
                        { description: 'Annual Companion Certificate', value: 200, frequency: 'annual', used: false },
                        { description: 'First Checked Bag Free (for 9)', value: 60, frequency: 'annual', used: false },
                        { description: '$150 Delta Stays Credit', value: 150, frequency: 'variable_annual', amountUsed: 0 },
                        { description: '$120 Resy Credit ($10/mo)', value: 10, frequency: 'monthly', monthsUsed: Array(12).fill(false) },
                        { description: '$120 Rideshare Credit ($10/mo)', value: 10, frequency: 'monthly', monthsUsed: Array(12).fill(false) },
                        { description: 'Global Entry/TSA PreCheck Credit', value: 100, frequency: 'annual', used: false }
                    ],
                    additionalBenefits: [
                        '**Earning Multipliers:** 3x miles on Delta purchases and hotels, 2x on dining and U.S. supermarkets, 1x on all other purchases.',
                        '**Cell Phone Protection:** Up to $800 per claim for repair/replacement against damage or theft when you pay your cell bill with the card (limit 2 claims per 12 months, $50 deductible).',
                        '**Purchase Protection:** Covers eligible purchases for 90 days against damage or theft, up to $1,000 per claim.',
                        '**Extended Warranty:** Adds up to one extra year to the original manufacturer\'s warranty of 5 years or less.',
                        '**Baggage Insurance:** Provides coverage for lost, damaged, or stolen baggage during a covered trip.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'miles' },
                    redemptionOptions: [
                        { method: 'Award Flights', pointsRedeemed: 0, valueDescription: 'High value possible' },
                        { method: 'Gift Cards', pointsRedeemed: 0, valueDescription: '0.8x value' },
                        { method: 'Merchandise', pointsRedeemed: 0, valueDescription: 'Low value' }
                    ]
                },
                {
                    id: 'us-bank-altitude-reserve',
                    name: 'US Bank Altitude Reserve',
                    bank: 'US Bank',
                    annualFee: 400,
                    openDate: { month: 'Jan', day: 20, year: 2023 },
                    benefits: [
                        { description: '$325 Annual Travel & Dining Credit', value: 325, frequency: 'variable_annual', amountUsed: 0 },
                        { description: '8 Free Priority Pass Visits', value: 264, frequency: 'annual', used: false },
                        { description: 'Global Entry/TSA PreCheck Credit', value: 100, frequency: 'annual', used: false }
                    ],
                    additionalBenefits: [
                        '**Earning Multipliers:** 5x points on prepaid hotels & car rentals through the Altitude Rewards Center, 3x on mobile wallet spending & travel.',
                        '**Purchase Security:** Protects new purchases against damage or theft for 90 days from the purchase date.',
                        '**Return Protection:** Reimburses you for eligible items the store won\'t take back within 90 days of purchase.',
                        '**Extended Warranty Protection:** Extends the manufacturer\'s warranty by one year on eligible warranties of three years or less.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'points' },
                    redemptionOptions: [
                        { method: 'Booking Travel', pointsRedeemed: 0, valueDescription: '1.5x value' },
                        { method: 'Cash Back / Statement Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Real-Time Rewards', pointsRedeemed: 0, valueDescription: '1.5x value' },
                        { method: 'Gift Cards', pointsRedeemed: 0, valueDescription: 'Varies' }
                    ]
                },
                {
                    id: 'us-bank-shopper-cash-rewards',
                    name: 'US Bank Shopper Cash Rewards Visa',
                    bank: 'US Bank',
                    annualFee: 95,
                    openDate: { month: 'Jul', day: 1, year: 2023 },
                    benefits: [
                        { description: '6% Cash Back on Retailer 1', value: 90, frequency: 'quarterly', used: [false, false, false, false], selectedOption: null, options: ['Amazon.com', 'Home Depot', 'Walmart', 'Target', 'Best Buy', 'Kohl\'s', 'Lowe\'s', 'Macy\'s', 'Sam\'s Club'] },
                        { description: '6% Cash Back on Retailer 2', value: 90, frequency: 'quarterly', used: [false, false, false, false], selectedOption: null, options: ['Amazon.com', 'Home Depot', 'Walmart', 'Target', 'Best Buy', 'Kohl\'s', 'Lowe\'s', 'Macy\'s', 'Sam\'s Club'] },
                        { description: '3% Everyday Category', value: 45, frequency: 'quarterly', used: [false, false, false, false], selectedOption: null, options: ['Gas', 'Grocery Stores', 'EV Charging Stations', 'Utilities'] }
                    ],
                    additionalBenefits: [
                        '**Earning Rates:** 6% cash back on two chosen retailers (on first $1,500 quarterly), 3% on one chosen everyday category (on first $1,500 quarterly), and 1.5% on all other purchases.',
                        '**Purchase Security:** Protects new purchases against damage or theft for 90 days from the purchase date.',
                        '**Extended Warranty Protection:** Extends the manufacturer\'s warranty by one year on eligible warranties of three years or less.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'cash back' },
                    redemptionOptions: [
                        { method: 'Real-Time Mobile Rewards', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Statement Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Direct Deposit', pointsRedeemed: 0, valueDescription: '1.0x value' }
                    ]
                },
                {
                    id: 'citi-double-cash',
                    name: 'Citibank Double Cash Card',
                    bank: 'Citibank',
                    annualFee: 0,
                    openDate: { month: 'Apr', day: 1, year: 2022 },
                    benefits: [],
                    additionalBenefits: [
                        '**Earning Multipliers:** 2% cash back on all purchases (1% when you buy, 1% when you pay).',
                        '**Identity Theft Protection:** Access to complimentary ID theft monitoring services.',
                        '**Citi Entertainment:** Special access to tickets for concerts, sporting events, and more.'
                    ],
                    totalEarnings: { pointsEarned: 0, unit: 'cash back' },
                    redemptionOptions: [
                        { method: 'Statement Credit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Direct Deposit', pointsRedeemed: 0, valueDescription: '1.0x value' },
                        { method: 'Check', pointsRedeemed: 0, valueDescription: '1.0x value' }
                    ]
                }
            ];

            const groupedCardData = cardData.reduce((acc, card) => {
                const bank = card.bank;
                if (!acc[bank]) {
                    acc[bank] = [];
                }
                acc[bank].push(card);
                return acc;
            }, {});

            const cardGrid = document.getElementById('card-grid');
            const charts = {};
            const quarters = ['Q1', 'Q2', 'Q3', 'Q4'];
            
            function calculateOffset(card) {
                return card.benefits.reduce((total, benefit) => {
                    if (benefit.frequency === 'annual' && benefit.used) {
                        return total + benefit.value;
                    } else if (benefit.frequency === 'monthly') {
                        const monthsUsedCount = benefit.monthsUsed.filter(Boolean).length;
                        return total + (benefit.value * monthsUsedCount);
                    } else if (benefit.frequency === 'quarterly') {
                         const quartersUsedCount = benefit.used.filter(Boolean).length;
                         return total + (benefit.value * quartersUsedCount);
                    } else if (benefit.frequency === 'variable_annual') {
                        return total + Math.min(benefit.value, benefit.amountUsed);
                    }
                    return total;
                }, 0);
            }

            function calculateEarnings(card) {
                return card.totalEarnings.pointsEarned;
            }

            function calculateRedemptions(card) {
                return card.redemptionOptions.reduce((total, option) => {
                    return total + option.pointsRedeemed;
                }, 0);
            }

            function renderCards() {
                cardGrid.innerHTML = '';
                Object.keys(groupedCardData).forEach(bankName => {
                    const bankHeader = document.createElement('h2');
                    bankHeader.className = 'text-2xl font-bold text-slate-900 mt-8 mb-4 col-span-full';
                    bankHeader.textContent = bankName;
                    cardGrid.appendChild(bankHeader);

                    const bankCards = groupedCardData[bankName];
                    bankCards.forEach((card, cardIndex) => {
                        const cardElement = document.createElement('div');
                        cardElement.className = 'bg-white rounded-xl shadow-lg p-6 flex flex-col hover:shadow-xl transition-shadow duration-300';
                        cardElement.dataset.cardIndex = cardIndex;

                        const benefitsHtml = card.benefits.map((benefit, benefitIndex) => {
                            if (benefit.frequency === 'annual') {
                                return `
                                    <div class="flex items-center justify-between py-3 border-b border-slate-200 last:border-b-0">
                                        <label for="benefit-${card.id}-${benefitIndex}" class="flex-1 text-slate-600 cursor-pointer">${benefit.description}</label>
                                        <div class="flex items-center">
                                            <span class="text-sm font-semibold text-slate-800 mr-4">$${benefit.value}</span>
                                            <input type="checkbox" id="benefit-${card.id}-${benefitIndex}" 
                                                   data-card-id="${card.id}" 
                                                   data-benefit-index="${benefitIndex}"
                                                   data-benefit-type="annual"
                                                   class="h-5 w-5 rounded border-slate-300 text-blue-600 focus:ring-blue-500 cursor-pointer" 
                                                   ${benefit.used ? 'checked' : ''}>
                                        </div>
                                    </div>
                                `;
                            } else if (benefit.frequency === 'monthly') {
                                const monthlyCheckboxesHtml = months.map((month, monthIndex) => `
                                    <div class="flex flex-col items-center text-xs text-slate-500">
                                        <span>${month}</span>
                                        <input type="checkbox" 
                                               data-card-id="${card.id}" 
                                               data-benefit-index="${benefitIndex}"
                                               data-month-index="${monthIndex}"
                                               data-benefit-type="monthly"
                                               class="h-4 w-4 rounded border-slate-300 text-blue-600 focus:ring-blue-500 cursor-pointer" 
                                               ${benefit.monthsUsed[monthIndex] ? 'checked' : ''}>
                                    </div>
                                `).join('');
                                return `
                                    <div class="py-3 border-b border-slate-200 last:border-b-0">
                                        <div class="flex items-center justify-between mb-2">
                                            <span class="flex-1 text-slate-600">${benefit.description}</span>
                                            <span class="text-sm font-semibold text-slate-800">$${benefit.value} / mo</span>
                                        </div>
                                        <div class="flex justify-around flex-wrap gap-y-2">
                                            ${monthlyCheckboxesHtml}
                                        </div>
                                    </div>
                                `;
                            } else if (benefit.frequency === 'quarterly') {
                                 const quarterlyCheckboxesHtml = quarters.map((quarter, quarterIndex) => `
                                    <div class="flex flex-col items-center text-xs text-slate-500">
                                        <span>${quarter}</span>
                                        <input type="checkbox" 
                                               data-card-id="${card.id}" 
                                               data-benefit-index="${benefitIndex}"
                                               data-quarter-index="${quarterIndex}"
                                               data-benefit-type="quarterly"
                                               class="h-4 w-4 rounded border-slate-300 text-blue-600 focus:ring-blue-500 cursor-pointer" 
                                               ${benefit.used[quarterIndex] ? 'checked' : ''}>
                                    </div>
                                `).join('');
                                const dropdownHtml = benefit.options ? `<select class="ml-2 h-8 rounded border-slate-300 text-slate-800 focus:ring-blue-500 focus:border-blue-500 text-sm"
                                    data-card-id="${card.id}" 
                                    data-benefit-index="${benefitIndex}"
                                    data-benefit-type="quarterly-dropdown">
                                    ${benefit.options.map(option => `<option value="${option}" ${benefit.selectedOption === option ? 'selected' : ''}>${option}</option>`).join('')}
                                </select>` : '';

                                return `
                                    <div class="py-3 border-b border-slate-200 last:border-b-0">
                                        <div class="flex items-center justify-between mb-2">
                                            <span class="flex-1 text-slate-600">${benefit.description} ${dropdownHtml}</span>
                                            <span class="text-sm font-semibold text-slate-800">$${benefit.value} / quarter</span>
                                        </div>
                                        <div class="flex justify-around flex-wrap gap-y-2">
                                            ${quarterlyCheckboxesHtml}
                                        </div>
                                    </div>
                                `;
                            } else if (benefit.frequency === 'variable_annual') {
                                return `
                                    <div class="flex items-center justify-between py-3 border-b border-slate-200 last:border-b-0">
                                        <label for="benefit-${card.id}-${benefitIndex}" class="flex-1 text-slate-600 cursor-pointer">${benefit.description}</label>
                                        <div class="flex items-center">
                                            <span class="text-sm font-semibold text-slate-800 mr-2">Used ($):</span>
                                            <input type="number" id="benefit-${card.id}-${benefitIndex}" 
                                                   data-card-id="${card.id}" 
                                                   data-benefit-index="${benefitIndex}"
                                                   data-benefit-type="variable_annual"
                                                   class="h-8 w-24 rounded border-slate-300 text-slate-800 focus:ring-blue-500 focus:border-blue-500 p-2" 
                                                   min="0" max="${benefit.value}" step="1"
                                                   value="${benefit.amountUsed}">
                                        </div>
                                    </div>
                                `;
                            }
                            return '';
                        }).join('');

                        const additionalBenefitsHtml = card.additionalBenefits.map(benefit => `
                            <li class="list-none text-sm text-slate-600">${benefit}</li>
                        `).join('');

                        const earningsHtml = `
                            <div class="flex items-center justify-between py-2 border-b border-slate-200">
                                <label for="total-earnings-${card.id}" class="text-sm text-slate-600 flex-1">Total Rewards Earned</label>
                                <div class="flex items-center">
                                    <span class="text-sm text-slate-500 mr-2">${card.totalEarnings.unit === 'cash back' ? '$' : ''}</span>
                                    <input type="number" id="total-earnings-${card.id}"
                                           data-card-id="${card.id}"
                                           data-type="total-earnings"
                                           class="h-8 w-24 rounded border-slate-300 text-slate-800 focus:ring-blue-500 focus:border-blue-500 p-2 text-right"
                                           min="0" step="1"
                                           value="${card.totalEarnings.pointsEarned}">
                                    <span class="text-sm text-slate-500 ml-2">${card.totalEarnings.unit === 'cash back' ? 'back' : card.totalEarnings.unit}</span>
                                </div>
                            </div>
                        `;

                        const redemptionsHtml = card.redemptionOptions.map((option, redemptionIndex) => `
                            <div class="flex items-center justify-between py-2 border-b border-slate-200 last:border-b-0">
                                <label for="redemption-${card.id}-${redemptionIndex}" class="text-sm text-slate-600 flex-1">${option.method} <span class="text-xs text-slate-400">(${option.valueDescription})</span></label>
                                <div class="flex items-center">
                                    <span class="text-sm text-slate-500 mr-2">Used:</span>
                                    <input type="number" id="redemption-${card.id}-${redemptionIndex}"
                                           data-card-id="${card.id}"
                                           data-redemption-index="${redemptionIndex}"
                                           data-type="redemption"
                                           class="h-8 w-24 rounded border-slate-300 text-slate-800 focus:ring-blue-500 focus:border-blue-500 p-2 text-right"
                                           min="0" step="1"
                                           value="${option.pointsRedeemed}">
                                </div>
                            </div>
                        `).join('');

                        const initialOffset = calculateOffset(card);
                        const initialEarnings = calculateEarnings(card);
                        const initialRedemptions = calculateRedemptions(card);
                        
                        const monthOptions = months.map(month => `<option value="${month}" ${card.openDate.month === month ? 'selected' : ''}>${month}</option>`).join('');
                        const yearOptions = years.map(year => `<option value="${year}" ${card.openDate.year === year ? 'selected' : ''}>${year}</option>`).join('');
                        const dayOptions = days.map(day => `<option value="${day}" ${card.openDate.day === day ? 'selected' : ''}>${day}</option>`).join('');

                        cardElement.innerHTML = `
                            <div class="flex justify-between items-start mb-4">
                                <div>
                                    <h2 class="text-xl font-bold text-slate-900">${card.name}</h2>
                                    <p class="text-sm text-slate-500">Opened: 
                                        <select data-card-id="${card.id}" data-open-date-part="month" class="bg-transparent border-none text-slate-500 text-sm p-0 pr-1">
                                            ${monthOptions}
                                        </select>
                                        <select data-card-id="${card.id}" data-open-date-part="day" class="bg-transparent border-none text-slate-500 text-sm p-0 pr-1">
                                            ${dayOptions}
                                        </select>
                                        <select data-card-id="${card.id}" data-open-date-part="year" class="bg-transparent border-none text-slate-500 text-sm p-0">
                                            ${yearOptions}
                                        </select>
                                    </p>
                                </div>
                                <div class="text-right">
                                    <p class="text-lg font-semibold text-slate-800">$${card.annualFee}</p>
                                    <p class="text-xs text-slate-500">Annual Fee</p>
                                </div>
                            </div>
                            <div class="mb-4">
                                <div class="flex justify-between items-center mb-1">
                                    <span class="text-sm font-medium text-slate-600">Value Recouped</span>
                                    <span id="offset-value-${card.id}" class="text-sm font-bold text-blue-600">$${initialOffset} / $${card.annualFee}</span>
                                </div>
                                <div class="chart-container">
                                    <canvas id="chart-${card.id}"></canvas>
                                </div>
                            </div>
                            <div class="flex-grow">
                                <h3 class="text-md font-semibold text-slate-700 mb-2 mt-4">Benefits Checklist</h3>
                                <div class="space-y-2">
                                    ${benefitsHtml}
                                </div>
                            </div>

                            <div class="mt-6">
                                <button class="w-full text-left font-semibold text-sm text-slate-700 p-3 rounded-md bg-slate-100 hover:bg-slate-200 transition-colors duration-200 flex justify-between items-center" 
                                        data-toggle-id="earning-benefits-${card.id}">
                                    <span>Points & Miles Earned</span>
                                    <span class="transform transition-transform duration-200">▼</span>
                                </button>
                                <div id="earning-benefits-${card.id}" class="hidden space-y-2 mt-2 px-3">
                                    ${earningsHtml}
                                </div>
                            </div>

                            <div class="mt-6">
                                <button class="w-full text-left font-semibold text-sm text-slate-700 p-3 rounded-md bg-slate-100 hover:bg-slate-200 transition-colors duration-200 flex justify-between items-center" 
                                        data-toggle-id="redemption-benefits-${card.id}">
                                    <span>Points & Miles Redemptions</span>
                                    <span class="transform transition-transform duration-200">▼</span>
                                </button>
                                <div id="redemption-benefits-${card.id}" class="hidden space-y-2 mt-2 px-3">
                                    <div class="flex justify-between items-center text-sm font-bold text-slate-800 py-2 border-b border-slate-300">
                                        <span>Total Redeemed:</span>
                                        <span id="total-redemptions-${card.id}">${card.totalEarnings.unit === 'cash back' ? '$' : ''}${initialRedemptions.toFixed(0)} ${card.totalEarnings.unit !== 'cash back' ? card.totalEarnings.unit : ''}</span>
                                    </div>
                                    ${redemptionsHtml}
                                </div>
                            </div>
                            
                            <div class="mt-6">
                                <button class="w-full text-left font-semibold text-sm text-slate-700 p-3 rounded-md bg-slate-100 hover:bg-slate-200 transition-colors duration-200 flex justify-between items-center" 
                                        data-toggle-id="additional-benefits-${card.id}">
                                    <span>Additional Protections & Benefits</span>
                                    <span class="transform transition-transform duration-200">▼</span>
                                </button>
                                <ul id="additional-benefits-${card.id}" class="hidden space-y-2 mt-2 px-3">
                                    ${additionalBenefitsHtml}
                                </ul>
                            </div>
                        `;
                        cardGrid.appendChild(cardElement);

                        const ctx = document.getElementById(`chart-${card.id}`).getContext('2d');
                        charts[card.id] = new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels: [''],
                                datasets: [{
                                    label: 'Value Used',
                                    data: [initialOffset],
                                    backgroundColor: '#3b82f6',
                                    barPercentage: 1.0,
                                    categoryPercentage: 1.0,
                                }, {
                                    label: 'Remaining Fee',
                                    data: [Math.max(0, card.annualFee - initialOffset)],
                                    backgroundColor: '#e2e8f0',
                                    barPercentage: 1.0,
                                    categoryPercentage: 1.0,
                                }]
                            },
                            options: {
                                indexAxis: 'y',
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        display: false
                                    },
                                    tooltip: {
                                        enabled: false
                                    }
                                },
                                scales: {
                                    x: {
                                        stacked: true,
                                        display: false,
                                        max: card.annualFee
                                    },
                                    y: {
                                        stacked: true,
                                        display: false
                                    }
                                },
                                animation: {
                                    duration: 500
                                }
                            }
                        });
                    });
                });
            }

            function updateCard(cardId) {
                const card = cardData.find(c => c.id === cardId);
                const offsetValue = calculateOffset(card);
                const remainingFee = Math.max(0, card.annualFee - offsetValue);
                const earnings = calculateEarnings(card);
                const redemptions = calculateRedemptions(card);

                const chart = charts[card.id];
                chart.data.datasets[0].data[0] = offsetValue;
                chart.data.datasets[1].data[0] = remainingFee;
                chart.update();

                const offsetValueEl = document.getElementById(`offset-value-${card.id}`);
                offsetValueEl.textContent = `$${offsetValue} / $${card.annualFee}`;
                
                const totalEarningsEl = document.getElementById(`total-earnings-${card.id}`);
                if (totalEarningsEl) {
                    totalEarningsEl.textContent = `${card.totalEarnings.unit === 'cash back' ? '$' : ''}${earnings.toFixed(0)} ${card.totalEarnings.unit !== 'cash back' ? card.totalEarnings.unit : ''}`;
                }

                const totalRedemptionsEl = document.getElementById(`total-redemptions-${card.id}`);
                if (totalRedemptionsEl) {
                    totalRedemptionsEl.textContent = `${card.totalEarnings.unit === 'cash back' ? '$' : ''}${redemptions.toFixed(0)} ${card.totalEarnings.unit !== 'cash back' ? card.totalEarnings.unit : ''}`;
                }
            }

            cardGrid.addEventListener('change', (e) => {
                const cardId = e.target.dataset.cardId;
                const card = cardData.find(c => c.id === cardId);
                const benefitIndex = e.target.dataset.benefitIndex;
                const benefitType = e.target.dataset.benefitType;
                const openDatePart = e.target.dataset.openDatePart;

                if (openDatePart) {
                    if (openDatePart === 'month') {
                        card.openDate.month = e.target.value;
                    } else if (openDatePart === 'day') {
                        card.openDate.day = parseInt(e.target.value);
                    } else if (openDatePart === 'year') {
                        card.openDate.year = parseInt(e.target.value);
                    }
                } else if (benefitType === 'annual') {
                    card.benefits[benefitIndex].used = e.target.checked;
                    updateCard(cardId);
                } else if (benefitType === 'monthly') {
                    const monthIndex = e.target.dataset.monthIndex;
                    card.benefits[benefitIndex].monthsUsed[monthIndex] = e.target.checked;
                    updateCard(cardId);
                } else if (benefitType === 'quarterly') {
                    const quarterIndex = e.target.dataset.quarterIndex;
                    card.benefits[benefitIndex].used[quarterIndex] = e.target.checked;
                    updateCard(cardId);
                } else if (benefitType === 'variable_annual') {
                    card.benefits[benefitIndex].amountUsed = parseFloat(e.target.value) || 0;
                    updateCard(cardId);
                }
            });
            
            cardGrid.addEventListener('input', (e) => {
                const cardId = e.target.dataset.cardId;
                const card = cardData.find(c => c.id === cardId);
                const type = e.target.dataset.type;

                if (type === 'total-earnings') {
                    card.totalEarnings.pointsEarned = parseFloat(e.target.value) || 0;
                    updateCard(cardId);
                } else if (type === 'redemption') {
                    const redemptionIndex = e.target.dataset.redemptionIndex;
                    card.redemptionOptions[redemptionIndex].pointsRedeemed = parseFloat(e.target.value) || 0;
                    updateCard(cardId);
                } else if (e.target.dataset.benefitType === 'variable_annual') {
                    const benefitIndex = e.target.dataset.benefitIndex;
                    card.benefits[benefitIndex].amountUsed = parseFloat(e.target.value) || 0;
                    updateCard(cardId);
                }
            });


            document.addEventListener('click', (e) => {
                const toggleButton = e.target.closest('[data-toggle-id]');
                if (toggleButton) {
                    const targetId = toggleButton.dataset.toggleId;
                    const targetEl = document.getElementById(targetId);
                    const arrowEl = toggleButton.querySelector('span:last-child');
                    if (targetEl.classList.contains('hidden')) {
                        targetEl.classList.remove('hidden');
                        arrowEl.classList.add('rotate-180');
                    } else {
                        targetEl.classList.add('hidden');
                        arrowEl.classList.remove('rotate-180');
                    }
                }
            });

            renderCards();
        });
    </script>

</body>
</html>

